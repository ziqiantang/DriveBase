import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.DcMotorController;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import java.util.Locale;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.hardware.ColorSensor;

import org.firstinspires.ftc.robotcontroller.external.samples.ConceptVuforiaNavigation;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.matrices.OpenGLMatrix;
import org.firstinspires.ftc.robotcore.external.matrices.VectorF;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.RelicRecoveryVuMark;
import org.firstinspires.ftc.robotcore.external.navigation.VuMarkInstanceId;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackableDefaultListener;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;

import android.graphics.Color;
/**
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 */

@TeleOp(name="SimplestTests", group="Linear Opmode")
@Disabled
public class SimplestTests extends LinearOpMode{
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor rightFront;
    private DcMotor rightBack;
    private DcMotor leftFront;
    private DcMotor leftBack;
    private DcMotor leftArm;
    private DcMotor rightArm;
    private CRServo hook;
    private Servo leftHand;
    private Servo rightHand;
    static final double     ANDYMRK_TICKS_PER_REV = 1120;
    static final double     DRIVE_GEAR_REDUCTION    = 1.0 ;     // This is < 1.0 if geared UP
    static final double     WHEEL_DIAMETER_INCHES   = 4 ;     // For figuring circumference
    static final double     COUNTS_PER_INCH         = (ANDYMRK_TICKS_PER_REV * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);

 // int newTarget = (int)distance*ticksPerInch;

public void runOpMode(){
    
   //boolean opModeIsActive=true;
    rightFront=hardwareMap.get(DcMotor.class,"rightFront");
    leftFront=hardwareMap.get(DcMotor.class,"leftFront");
    rightBack=hardwareMap.get(DcMotor.class,"leftBack");
    leftBack=hardwareMap.get(DcMotor.class,"leftBack");
    
    rightBack=hardwareMap.get(DcMotor.class,"rightBack");
    leftBack=hardwareMap.get(DcMotor.class,"leftBack");
    rightFront=hardwareMap.get(DcMotor.class,"rightFront");
    leftFront=hardwareMap.get(DcMotor.class,"leftFront");
    
    rightArm=hardwareMap.get(DcMotor.class,"rightArm");
    leftArm=hardwareMap.get(DcMotor.class,"arm1");
    leftHand=hardwareMap.get(CRServo.class,"leftHand");
    rightHand = hardwareMap.get(CRServo.class, "rightHand");
    
    hook = hardwareMap.get(Servo.class, "hook");
    lid = hardwareMap.get(Servo.class, "lid");

    // Wait for the game to start (driver presses PLAY)
    waitForStart();
    runtime.reset();
    reset();
    
    while (opModeIsActive()) {
    rightFront.setDirection(DcMotor.Direction.REVERSE);
    leftFront.setDirection(DcMotor.Direction.FORWARD);
    rightFront.setDirection(DcMotor.Direction.REVERSE);
    leftFront.setDirection(DcMotor.Direction.FORWARD);
    
    arm.setDirection(DcMotor.Direction.FORWARD);
    arm1.setDirection(DcMotor.Direction.FORWARD);
   
  
    Drive(); 
   
    }
}
/*
public void runArm(){
   
    arm.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    arm.setTargetPosition(27);
    if(arm.isBusy()||getCurrentPosition()==0){
        arm.setTargetPosition(26);
        arm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    }
    */
    
   
public void reset(){
    hook.setPosition(0.3);
}

public void Drive() {
   
double r = Math.hypot(gamepad1.left_stick_x, gamepad1.left_stick_y);
double robotAngle = Math.atan2(gamepad1.left_stick_y, gamepad1.left_stick_x) - Math.PI / 4;
double rightX = gamepad1.right_stick_x;
final double v1 = r * Math.cos(robotAngle) + rightX;
final double v2 = r * Math.sin(robotAngle) - rightX;
final double v3 = r * Math.sin(robotAngle) + rightX;
final double v4 = r * Math.cos(robotAngle) - rightX;

       
  
        rightFront.setPower(v2);
        leftFront.setPower(v1);
        rightBack.setPower(v4);
        leftBack.setPower(v3}
       
            
    
        

    pusher.setPower(-Math.pow(gamepad2.left_stick_x, 1.0));

  if(gamepad2.left_bumper)  { 
    leftHand.setPosition(-1);
    rightHand.setPosition(1);
    }
     if(gamepad2.right_bumper)  { 
    leftHand.setPosition(1);
    rightHand.setPosition(-1);
    }
    
    
    
}
    
   
   
/*
    public void hookUp(){
        hook.setDirection(Servo.Direction(BACKWARD));
        hook.setPosition(1.0);
    }
    public void hookDown(){
        hook.setDirection(Servo.Direction(FORWARD));
        hook.setPosition(1.0);
    }

  final int ticksPerInch=94;
  int newTarget = (int)distance*ticksPerInch;

  //set mode to RunMode to access methods
  rightBack.setMode(DcMotor.RunMode.RUN_TO_POSITION);
  leftBack.setMode(DcMotor.RunMode.RUN_TO_POSITION);
  leftFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);
  rightFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);
  //set power
  leftFront.setPower(0.5);
  leftBack.setPower(0.5);
  rightFront.setPower(0.5);
  rightBack.setPower(0.5);
  
  //run to position.
  rightBack.setTargetPosition(rightBack.getCurrentPosition()+newTarget);
  leftBack.setTargetPosition(leftBack.getCurrentPosition()+newTarget);
  leftFront.setTargetPosition(leftFront.getCurrentPosition()+newTarget);
  rightFront.setTargetPosition(rightFront.getCurrentPosition()+newTarget);
  
  while(rightFront.isBusy()&&rightBack.isBusy()&&leftFront.isBusy()&&leftBack.isBusy()){
    
  }
 */ 
  
    
}
